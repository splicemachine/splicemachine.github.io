{{- $advertisedListenersOverride := first (pluck "advertised.listeners" .Values.configurationOverrides) }}
{{- $listenerSecurityProtocolMap := first (pluck "listener.security.protocol.map" .Values.configurationOverrides) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "kafka.fullname" . }}
  labels:
    app: {{ template "kafka.name" . }}
    chart: {{ template "kafka.chart" . }}
    release: {{ .Release.Name }}
    component: {{ include "kafka.component" . }}
    frameworkId: {{ include "frameworkId" . }}
    dnsprefix: {{ .Values.global.dnsPrefix }}
spec:
  selector:
    matchLabels:
      app: {{ include "kafka.name" . }}
      release: {{ .Release.Name }}
      component: {{ include "kafka.component" . }}
      dnsprefix: {{ .Values.global.dnsPrefix }}
  serviceName: {{ include "kafka.fullname" . }}-headless
  podManagementPolicy: "OrderedReady"
  updateStrategy:
    type: RollingUpdate
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "kafka.name" . }}
        release: {{ .Release.Name }}
        component: {{ include "kafka.component" . }}
        dnsprefix: {{ .Values.global.dnsPrefix }}
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
                matchLabels:
                  app:  {{ template "kafka.name" . }}
                  release: {{ .Release.Name | quote }}
                  component: {{ include "kafka.component" . }}
                  dnsprefix: {{ .Values.global.dnsPrefix }}
            topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 0
      {{- if .Values.global.nodeSelector.enabled }}
      nodeSelector:
        components: {{ .Values.global.nodeSelector.meta }}
      {{- end }}
      initContainers:
      - name: wait-zk
        image: {{ template "hdfs-image" . }}
        command:
           - "/bin/bash"
           - "/usr/lib/hadoop/bin/splice/wait-for-zk-connect.sh"
           - "{{ include "zookeeper-fullname" . }}"
           - "{{ include "zookeeper-fullname" . }}-headless"
           - "{{ include "svc-domain" . }}"
      containers:
      - name: {{ include "kafka.name" . }}-broker
        image: {{ template "kafka.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 9092
          name: kafka
          {{- if .Values.external.enabled }}
          {{- $replicas := .Values.replicas | int }}
          {{- $root := . }}
          {{- range $i, $e := until $replicas }}
        - containerPort: {{ add $root.Values.external.firstListenerPort $i }}
          name: external-{{ $i }}
          {{- end }}
        {{- end }}
        env:
          - name: RELEASE_NAME
            value: {{ include "frameworkId" . }}
          - name: SERVICE_NAME
            value: {{ template "kafka.fullname" . }}
          - name: DOMAIN_NAME
            value: {{ include "svc-domain" . }}
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: TZ
            value: {{ .Values.global.timezoneFlag }}
        command:
        - "/bin/bash"
        - "/usr/lib/kafka/bin/splice/start-kafka.sh"
        - "PLAINTEXT://MY_POD_NAME_VAR.{{ template "kafka.fullname" . }}-headless.{{ include "svc-domain" . }}:9092"
        - "{{ $advertisedListenersOverride }}"
        - "{{ $listenerSecurityProtocolMap }}"
        - "{{ template "kafka.fullname" . }}"
        - "{{ template "kafka.fullname" . }}-headless"
        - "{{ template "svc-domain" . }}"
        - "{{ .Values.global.dnsPrefix }}"
        - "{{ .Values.external.domain }}"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/lib/kafka/bin/splice/check-running.sh"
            -
{{ toYaml .Values.livenessProbe | indent 10 }}
        volumeMounts:
        - name: kafka-config
          mountPath: /tmp/kafka-config
        - name: datadir
          mountPath: {{ .Values.persistence.mountPath | quote }}
      volumes:
      - name: kafka-config
        configMap:
          name: {{ template "kafka.config.name" . }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
{{ toYaml $.Values.persistence.accessMode | indent 8 }}
      resources:
        requests:
          storage: {{ $.Values.persistence.size }}
      storageClassName: {{ $.Values.persistence.storageClassName }}
