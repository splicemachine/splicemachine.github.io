apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "hbase.hregion.fullname" . }}
  labels:
    app: {{ template "hbase.name" . }}
    chart: {{ template "hbase.chart" . }}
    release: {{ .Release.Name }}
    component: {{ include "hbase.hregion.component" . }}
    frameworkId: {{ include "frameworkId" . }}
    dnsprefix: {{ .Values.global.dnsPrefix }}
spec:
  selector:
    matchLabels:
      app: {{ include "hbase.name" . }}
      release: {{ .Release.Name }}
      component: {{ include "hbase.hregion.component" . }}
      dnsprefix: {{ .Values.global.dnsPrefix }}
  serviceName: {{ template "hbase.hregion.fullname" . }}-hl
  podManagementPolicy: "Parallel"
  updateStrategy:
    type: RollingUpdate
  replicas: {{ .Values.region.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "hbase.name" . }}
        release: {{ .Release.Name }}
        component: {{ include "hbase.hregion.component" . }}
        dnsprefix: {{ .Values.global.dnsPrefix }}
        version: "v1"
    spec:
      affinity:
       {{- if eq .Values.region.affinityDataNode "hard" }}
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels:
                app:  hadoop
                release: {{ .Release.Name | quote }}
                component: {{ include "hdfs.datanode.component" . }}
                dnsprefix: {{ .Values.global.dnsPrefix }}
        {{- else if eq .Values.region.affinityDataNode "soft" }}
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 45
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app:  hadoop
                  release: {{ .Release.Name | quote }}
                  component: {{ include "hdfs.datanode.component" . }}
                  dnsprefix: {{ .Values.global.dnsPrefix }}
        {{- end }}
       {{- if eq .Values.region.affinityUniqueHost "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels:
                app: {{ include "hbase.name" . }}
                release: {{ .Release.Name | quote }}
                component: {{ include "hbase.hregion.component" . }}
                dnsprefix: {{ .Values.global.dnsPrefix }}
        {{- else if eq .Values.region.affinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ include "hbase.name" . }}
                  release: {{ .Release.Name | quote }}
                  component: {{ include "hbase.hregion.component" . }}
                  dnsprefix: {{ .Values.global.dnsPrefix }}
        {{- end }}
      terminationGracePeriodSeconds: 0
      {{- if .Values.global.nodeSelector.enabled }}
      nodeSelector:
        components: {{  .Values.global.nodeSelector.db  }}
      {{- end }}
      initContainers:
      - name: wait-master
        image: {{ template "hbase.image" . }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
           - "/bin/bash"
           - "/usr/lib/hbase/bin/splice/wait-for-master.sh"
           - "{{ include "hbase.hmaster.fullname" . }}"
           - "{{ include "svc-domain" . }}"
      containers:
      - name: hbase-rs
        image: {{ template "hbase.image" . }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
          - name: HBASE_COMPONENT
            value: region
          - name: RELEASE_NAME
            value: {{ .Release.Name }}
          - name: FRAMEWORKID
            value: {{ include "frameworkId" . }}
          - name: SERVICE_NAME
            value: {{ include "hbase.hregion.fullname" . }}-hl
          - name: DOMAIN_NAME
            value: {{ include "svc-domain" . }}
          - name: HBASE_DEBUG
            value: "{{ .Values.debug }}"
          - name: JAVASCOPE
            value: "{{ .Values.global.jscpEnabled }}"
          - name: ZOOKEEPER_QUORUM
            value: "{{ include "zookeeper-quorum" . }}"
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: TZ
            value: {{ .Values.global.timezoneFlag }}
        command:
        - "/bin/bash"
        - "/usr/lib/hbase/bin/splice/start-hbase-component.sh"
        resources:
{{ toYaml .Values.region.resources | indent 10 }}
        lifecycle:
          preStop:
            exec:
              command: [
                "/bin/bash",
                "/usr/lib/hbase/bin/hbase",
                "stop",
                "regionserver",
                "$HOSTNAME"
              ]
        startupProbe:
          exec:
            command:
              - sh
              - -c
              - "/usr/lib/hbase/bin/splice/hregion-startup-check.sh"
{{ toYaml .Values.region.startupProbe | indent 10 }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/lib/hbase/bin/splice/hregion-liveness.sh"
{{ toYaml .Values.region.livenessProbe | indent 10 }}
        volumeMounts:
        - name: hbase-config
          mountPath: /tmp/hbase-config
        - name: spark-config
          mountPath: /tmp/spark-config
        - name: hdfs-config
          mountPath: /tmp/hdfs-config
        - name: logdir
          mountPath: /var/log/hbase
      securityContext:
        runAsUser: 1004
        fsGroup: 1000
      volumes:
      - name: hbase-config
        configMap:
          name: {{ include "hbase.config.name" . }}
      - name: spark-config
        configMap:
          name: {{ include "spark.config.name" . }}
      - name: hdfs-config
        configMap:
          name: {{ template "hadoop.config.name" . }}
  volumeClaimTemplates:
  - metadata:
      name: logdir
    spec:
      accessModes:
      {{ toYaml $.Values.region.persistence.accessMode | indent 8 }}
      resources:
        requests:
          storage: {{ $.Values.region.persistence.size }}
      storageClassName: {{ $.Values.region.persistence.storageClassName }}
